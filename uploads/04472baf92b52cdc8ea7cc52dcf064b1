
#pragma GCC optimize("unroll-loops")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#pragma GCC optimize("Ofast")

//
#define ll long long
#define lli long long int
#define tc            long long ___tc; cin >> ___tc; while (___tc-- > 0)
#define all(c)              (c).begin(), (c).end()
#define allr(c) (c).rbegin(), (c).rend()
#define setbits(x) __builtin_popcountll(x)
#define zerobits(x)      __builtin_ctzll(x)
#define inf 1e18
#define rep(i, a, b) for(ll i = a; i < b; i++)
#define MOD 1000000007
#define PI 3.141592653589793238462
#define moda 1000003

//
using namespace std;
using namespace __gnu_pbds;

//<-------------------------------------------------------------------------------------------------------------->
//PBDS
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> PBDS;

//<----------------------------------------------------------------------------------------------->>>>>>>>

ll gcd (ll a, ll b) { while (b) { a %= b; swap(a, b); } return a; }
ll lcm (ll a, ll b) { return a / gcd(a, b) * b; }

bool isPowerOfTwo(int n)
{
   if(n==0)
   return false;
 
   return (ceil(log2(n)) == floor(log2(n)));
}


vector<bool> SieveofEratosthenes(int n) {
   vector<bool>primes(n + 1, true);
   primes[0] = 0;
   primes[1] = 0;
   for (int i = 2; i * i <= n; i++) {
      if (primes[i]) {
         for (int j = i * i; j <= n; j += i) {
            primes[j] = false;
         }
      }
   }
 
   return primes;
 
}


bool comp(const pair<int,int> &a,const pair<int,int> &b)
{
    return (a.first < b.first);
}

bool is_perfect(long double n)
{
   ll x = sqrt(n);

   return(x==n);
}

ll to_number(string s)
{
   return stol(s);
}

bool isPrime(ll n)
{
    // Corner case
    if (n <= 1)
        return false;
 
    // Check from 2 to square root of n
    for (ll i = 2; i <= (ll)sqrtl(n); i++)
        if (n % i == 0)
            return false;
 
    return true;
}



vector<ll> get_power_2()
{
   vector<ll> po;
   po.push_back(1);
   po.push_back(2);
   ll num=2;
   for(ll i=2;i<=61;i++)
   {
      num*=2LL;
      po.push_back(num);
   }

   return po;
}

bool aresame(string &s,char &c)
{
   for(ll i=0;i<s.size();i++)
   {
      if(s[i]!=c)return false;
   }

   return true;
}

bool comp1(const pair<ll,string> &a,const pair<ll,string> &b)
{
    return (a.second <b.second);
}

bool comp2(const pair<ll,string> &a,const pair<ll,string> &b)
{
    return (a.second > b.second);
}






void solve()
{
   ll len;
   cin>>len;
   string s;cin>>s;

   if(s[0]=='9')
   {
      string ans="";
      reverse(all(s));
      //string ans="";
      int carry=0;
      for(int i=0;i<s.size();i++)
      {
         int x = 1-carry;
         int y = s[i]-'0';
         carry=0;
         if(x<y)
         {
            x+=10;
            carry=1;
         }
         x-=y;
         ans+=(x+'0');

      }
      reverse(all(ans));
      cout<<ans;
      cout<<"\n";
   }
   else
   {
for(auto &x:s)
      {
         int num = x-'0';
         cout<<9-num;
      }

      cout<<"\n";
   }
}



//<------------------------------------------------------------------------------------------------------------->
int main()
{
   //freopen("input.txt","r",stdin);
   //freopen("output.txt","w",stdout);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);


   // pre();


tc
    {
       //cout<<tc<<"\n";
      solve();
      //atcoder();
    }

    /*ll t;
    cin>>t;
    ll i;
    for(i=1;i<=t;i++)
    {
         cout<<"Case #"<< i<<": ";
         AbToKarnaHiHai();
    }*/
    

}



